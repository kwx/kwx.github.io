

http://git-scm.com/

#####################
### ssh 相关设置   ###
#####################

ssh-keygen -t rsa

ssh-keygen -t rsa -f id_local


~/.ssh/config

Host git
        Hostname 127.0.0.1
        User git
        IdentityFile ~/.ssh/id_rsa  	
Host gitlab_local
		Hostname 127.0.0.1
		User git
		IdentityFile ~/.ssh/id_local

~/.ssh/authorized_keys

#####################
### Git 常用命令   ###
#####################

# 裸仓库
git init --bare

git status
git add fileName
git commit -m '本次提交说明"
diff : git diff fileName
历史记录：git log  ,  简要显示:  git log --pretty=oneline
git reset --hard HEAD^     ,     HEAD 表示当前版本，加一个^表示上一个版本，^^便是上上个版本。
命令记录:  git reflog
撤销修改：git checkout -- fileName
撤销暂存区以内的修改：git reset HEAD fileName  到最新版本。
删除文件：git rm fileName
保存工作现场：git stash,  恢复 git stash apply stash@{0} ,  具体参考 git stash ?

分支：
Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch name
切换分支：git checkout name
创建+切换分支：git checkout -b name
合并某分支到当前分支：git merge name
删除分支：git branch -d name
打印分支信息: git log —pretty=oneline —-graph


@未进入stage的修改：git checkout — fileName
@已经进入stage但是未commit的修改：git reset HEAD fileName (将修改从stage中取出)，
再 git checkout — fileName
@已经commit的修改：版本回退 git reset HEAD^ 或者 git reset —force 版本号
@已经push到远程的修改：再次提交一个覆盖版本。



######### 冲突处理

当合并merge出现冲突conflict的时候,将设冲突文件为path/to/conflicted-file.txt
1.手工去对文件进行细化的调整。
2.使用他人的更新，忽略本地修改。
git checkout —theirs — path/to/conflicted-file.txt
3.使用本地的更新，忽略他人修改。
git checkout —ours — path/to/conflicted-file.txt




######### 远程分支

两个命令同步本地分支与远程分支：
push : 更新本地远程引用，并将数据推送到远程仓库
fetch : 远程仓库同步到本地，并更新本地远程引用。并没有改动任何本地分支数据，需执行merge命令

抓取远程分支
git fetch origin : 更新本地远程仓库指针

合并远程分支
git merge origin/dev : 将本地的远程分支合并到当前分支

跟踪远程分支
git checkout —track origin/dev : 在本地创建一个同名分支dev跟踪远程分支dev
git checkout -b localDev origin/dev :  在远程分支dev上分出一个本地的localDev分支，并切换到该分支

推送本地分支
git push
git push [远程名字] [本地分支]   => 将本地的分支推送到远程的同名分支
git push [远程名字] [本地分支]:[远程分支]
git push origin GUI:feature/界面

删除远程分支
git push [远程名]:[远程分支]

打印远程仓库信息
git remote show origin  => origin 为远程名


抓取分支 & 合并分支
git pull






